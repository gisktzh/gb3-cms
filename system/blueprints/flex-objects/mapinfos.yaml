title: Hinweise für Karten
description: Ein Ordner mit vergangenen, aktuellen und zukünftigen Infos zu Karten.
type: flex-objects

# Flex Configuration
config:
  # Administration Configuration
  admin:
    # Admin router (optional)
    router:
      path: '/mapinfos'

    # Admin menu (optional)
    menu:
      list:
        route: '/mapinfos'
        title: Hinweise für Karten
        icon: fa-info-circle
        # Authorization to collection admin
        authorize: ['admin.topics.list', 'admin.super']
        # Priority -10 .. 10 (highest goes up)
        priority: 2

    # Admin template type / folder
    template: default

    # Permissions
    permissions:
      # Primary permissions
      admin.topics:
        type: crudpl
        label: MapInfos

    # List view
    list:
      title: name
      fields:
        header.title:
          link: edit
        header.topics:
          link: edit
        header.from_date:
        header.to_date:

    # Edit View
    edit:
      title:
        template: '{{ object.header.title }}'

    # Preview View
    preview:
      enabled: false
      route:
        #template: '/plugins/flex-objects/directory:mapinfos'

    # Data Export
    export:
      enabled: true
      method: 'jsonSerialize'
      formatter:
        class: 'Grav\Framework\File\Formatter\YamlFormatter'
      filename: 'mapinfos'

  # Site Configuration
  site:
    templates:
      collection:
        # Lookup for the template layout files for collections of objects
        paths:
          - 'flex/{TYPE}/collection/{LAYOUT}{EXT}'
      object:
        # Lookup for the template layout files for objects
        paths:
          - 'flex/{TYPE}/object/{LAYOUT}{EXT}'
      defaults:
        # Default template {TYPE}; overridden by filename of this blueprint if template folder exists
        type: mapinfos
        # Default template {LAYOUT}; can be overridden in render calls (usually Twig in templates)
        layout: default

  # Data Configuration
  data:
    # Object class to be used, allowing custom methods for the object
    object: 'Grav\Common\Flex\Types\Generic\GenericObject'
    # Collection class to be used, allowing custom methods for the collections
    collection: 'Grav\Common\Flex\Types\Generic\GenericCollection'
    # Index class to be used, works as a quick database-like lookup index
    index: 'Grav\Common\Flex\Types\Generic\GenericIndex'
    storage:
      # Storage class, use a folder storage (does support images and assets)
      class: 'Grav\Framework\Flex\Storage\FolderStorage'
      options:
        formatter:
          # File formatter class, in this case the file is stored in markdown
          class: 'Grav\Framework\File\Formatter\JsonFormatter'
        # JSON file where all the objects will be stored
        folder: user-data://flex-objects/mapinfos
    ordering:
      header.from_date: ASC
      header.to_date: ASC
    search:
      # Search options
      options:
        contains: 1
      # Fields to be searched
      fields:
        - header.title
        - header.topics

form:
  validation: loose

  fields:
    header.title:
      type: text
      autofocus: true
      style: vertical
      label: 'Titel'
      validate:
        required: true
    header.description:
      type: textarea
      style: vertical
      label: 'Beschreibung'
      validate:
        required: true
    header.topics:
      type: selectize
      style: vertical
      label: 'Topic IDs'
      placeholder: Eingabe einer oder mehrerer Topic IDs
      selectize:
        data-options@: '\Grav\Plugin\TopicsPlugin::topicsAsTextValuePair'
        create: false
      validate:
        required: true
        type: commalist
    header.from_date:
      type: datetime
      format: d.m.Y
      style: vertical
      label: 'Sichtbar von'
      validate:
        required: true
    header.to_date:
      type: datetime
      format: d.m.Y
      style: vertical
      label: 'Sichtbar bis'
      validate:
        required: true
